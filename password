#!/bin/bash
# AUTHOR Martin Stenberg <martin@gnutiken.se>
# VERSION 2012-03-06
set -u

PASSWORDRC="$HOME/.passwordrc";
EDITOR=${EDITOR:-"vi"}

if [ -f "$PASSWORDRC" ]; then
    source "$PASSWORDRC"
else
    echo "Warning: Missing \"$PASSWORDRC\" file. Generating default file..."

    echo "PASSWORDS=\$HOME/.gnupg/passwords.gpg" > "$PASSWORDRC"
    echo "PASSWORDS_TMP=\$HOME/.gnupg/passwords.tmp" > "$PASSWORDRC"
    echo "PASSWORD_LENGTH=24" > "$PASSWORDRC"
    echo "PWGEN=\"/usr/bin/pwgen -s -c -n -y 24 1\"" > "$PASSWORDRC"

    echo "Please enter recipients (this will be the people who will have access to the password file)."
    echo "Seperate recipients with a space. Example: user@domain.tld 5DAF9A31 user2@otherdomain.tld"
    echo -n "RECIPIENTS="; read RECIPIENTS

    echo "RECIPIENTS=\"$RECIPIENTS\"" > "$PASSWORDRC"
    source "$PASSWORDRC"
fi

if [ -z "$PASSWORDS" ]; then
    echo "Error: \"$PASSWORDRC\" is missing a PASSWORDS line!"
    exit 1
elif [ -z "$PASSWORDS_TMP" ]; then
    PASSWORDS_TMP=$(echo "$PASSWORDS" | sed 's/\..\+$//').decrypted.tmp
    echo "Warning: \"$PASSWORDRC\" is missing a PASSWORD_TMP line. Using default path (\"$PASSWORDS_TMP\")."
elif [ -z "$RECIPIENTS" ]; then
    echo "Error: \"$PASSWORDRC\" is missing a RECIPIENTS line!"
    exit 1
fi

function get {
    arg_user=""
    arg_clip=""
    arg_clipUsr=""
	arg_passonly=""
    while getopts "ucCp" opt
    do
      case $opt in
        u     ) arg_user=1;;
        c     ) arg_clip=1;
                if [ -z `which xclip 2>/dev/null` ]; then
                    echo "Error: Could not find xclip. Please install xclip and try again"
                    exit 1
                fi
                ;;
        C     ) arg_clipUsr=1;
                if [ -z `which xclip 2>/dev/null` ]; then
                    echo "Error: Could not find xclip. Please install xclip and try again"
                    exit 1
                fi
                ;;
		p     ) arg_passonly=1;;
      esac
    done

    shift $(($OPTIND - 1))

    clip="cat" ;
    [ -n "$arg_clip" ] && clip="tail -n1|sed 's/\(^\s\+\|\s\+$\)//g'|xclip"
    [ -n "$arg_clipUsr" ] && clip="head -n2|tail -n1|sed 's/\(^\s\+\|\s\+$\)//g'|xclip"
	[ -n "$arg_passonly" ] && clip="tail -n1|sed 's/\(^\s\+\|\s\+$\)//g'"

    if [ -n "$arg_user" ]
    then
        gpg -q --use-agent --batch -d ${PASSWORDS}|grep -i -a -A1 -B1 "^[[:blank:]]\+$@"|eval $clip
    else
        gpg -q --use-agent --batch -d ${PASSWORDS}|grep -i -a -A2 "$@"|eval $clip
    fi
}

function new {
    PWGEN_BASE=$(basename $(echo $PWGEN|cut -d' ' -f1))
    if [ -z `which $PWGEN_BASE 2>/dev/null` ]; then
        echo "Error: Could not find $PWGEN_BASE. Please install $PWGEN_BASE and try again"
        exit 1
    fi

    arg_noninteractive=""
    arg_user=""
    arg_clip=""
    arg_pass=""
    arg_host=""
    while getopts "ncu:h:p:" opt
    do
      case $opt in
        n     ) arg_noninteractive=1;;
        c     ) arg_clip=1;
                if [ -z `which xclip 2>/dev/null` ]; then
                    echo "Error: Could not find xclip. Please install xclip and try again"
                    exit 1
                fi
                ;;
        h     ) arg_host="$OPTARG";;
        u     ) arg_user="$OPTARG";;
        p     ) arg_pass="$OPTARG";;
      esac
    done
    shift $(($OPTIND - 1))

    host="$arg_host"
    user="$arg_user"
    password="$arg_pass"
    if [ -n "$arg_noninteractive" -a -z "$host" ]; then
        echo "Error: Missing hostname! Use -h <hostname> to specify a hostname."
        exit 1
    fi

    if [ -z "$arg_noninteractive" -a -z "$host" ]; then 
        echo -n "host: "
        read host
    fi

    if [ -z "$arg_noninteractive" -a -z "$user" ]; then 
        echo -n "user: "
        read user
    fi

    PASS=$($PWGEN)
    if [ -z "$arg_noninteractive" -a -z "$password" ]; then 
        echo -n "password ($PASS): "
        read password
    fi
    [ -z "$password" ] && password="$PASS";

    # Copy password to clipboard if -c
    [ -n "$arg_clip" ] && echo -n "$password" | xclip

    PASSWORD_DATA=$(gpg -q --use-agent --batch -d ${PASSWORDS}) 
    if [ $? -ne 0 ]; then
        echo "Failed to add password"
        exit 1
    fi
    echo -e "${PASSWORD_DATA}\n${host}\n\t${user}\n\t${password}" | gpg -q --use-agent --batch -e ${RECIPIENTS_ARGS} > ${PASSWORDS}.tmp
    if [ $? -eq 0 ]; then
        mv ${PASSWORDS}.tmp ${PASSWORDS}
    else
        echo "Failed to add password"
        rm ${PASSWORDS}.tmp
        exit 1
    fi
}

function edit {
	echo "WARNING: This command will result in the password file being stored decrypted to ${PASSWORDS_TMP}."
	echo "         It is unwise to continue unless this is an encrypted disk or a RAM disk"
    echo "         and $EDITOR is set to not swap och store backup files."
	echo -n "         Continue? [yes/No]"
	read cont

	[ "$cont" != "yes" ] && exit 0

    OLDMASK=$(umask)
    umask 077
    gpg -q --use-agent --batch -d ${PASSWORDS} > ${PASSWORDS_TMP}
    MTIME_CREATED=$(stat -c "%Y" ${PASSWORDS_TMP})
    $EDITOR ${PASSWORDS_TMP}
    MTIME_EDITED=$(stat -c "%Y" ${PASSWORDS_TMP})

    if [ $MTIME_EDITED -gt $MTIME_CREATED ]; then
        gpg -q --use-agent --batch -e ${RECIPIENTS_ARGS} ${PASSWORDS_TMP}
        mv ${PASSWORDS_TMP}.gpg ${PASSWORDS}
    fi

    rm ${PASSWORDS_TMP}
    umask $OLDMASK
}

function usage {
    echo "Usage: password <get|new|edit>"
    echo 
    echo "  get [-u] PATTERN   get password matching hostname pattern PATTERN"
    echo "    -u               match username instead of hostname"
    echo "    -c               copy password to clipboard"
    echo "    -C               copy username to clipboard"
    echo "    -p               print only password"
    echo "  new [-nc] [-h HOST] [-u USERNAME] [-p PASSWORD]"
    echo "    -n               noninteractive mode"
    echo "    -c               copy password to clipboard"
    echo "    -h HOSTNAME      hostname to store in password file"
    echo "    -u USERNAME      username to store in password file"
    echo "    -p PASSWORD      password to store in password file"
    echo "  edit               edit passwordfile with ${EDITOR}"
}

if [ -z `which gpg 2>/dev/null` ]; then
    echo "Error: could not find gpg. Please install gnupg and try again."
    exit 1
fi

RECIPIENTS_ARGS=""
for r in ${RECIPIENTS};do RECIPIENTS_ARGS="${RECIPIENTS_ARGS}-r $r ";done

set +u
args=$@
case $(basename $0) in 
    passfor     ) cmd="get";;
    newpass     ) cmd="new";;
    editpass    ) cmd="edit";;
    pass2clip   ) cmd="get"; args=( "-c" "${args[@]}" );;
    *           ) cmd="$1"; shift; args=$@;;
esac
set -u

case $cmd in
    get ) get ${args[@]};;
    new ) new ${args[@]};;
    edit) edit ${args[@]};;
    *   ) usage; exit 2;;
esac
